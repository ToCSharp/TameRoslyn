// Copyright (c) Oleg Zudov. All Rights Reserved. Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

namespace Zu.TameRoslyn.Syntax
{
    public static class DefaultValues
    {
        public static string CompilationUnitSyntaxExternsStr = "";
        public static string CompilationUnitSyntaxUsingsStr = "";
        public static string CompilationUnitSyntaxAttributeListsStr = "";
        public static string CompilationUnitSyntaxMembersStr = "";
        public static string CompilationUnitSyntaxEndOfFileTokenStr = "";
        public static string UsingDirectiveSyntaxUsingKeywordStr = "using";
        public static string UsingDirectiveSyntaxStaticKeywordStr = "";
        public static string UsingDirectiveSyntaxAliasStr = null;
        public static string UsingDirectiveSyntaxNameStr = "";
        public static string UsingDirectiveSyntaxSemicolonTokenStr = ";";
        public static string IdentifierNameSyntaxIdentifierStr = "";
        public static int IdentifierNameSyntaxArity = 0;
        public static bool IdentifierNameSyntaxIsVar = false;
        public static string QualifiedNameSyntaxLeftStr = "";
        public static string QualifiedNameSyntaxDotTokenStr = ".";
        public static string QualifiedNameSyntaxRightStr = "";
        public static int QualifiedNameSyntaxArity = 0;
        public static bool QualifiedNameSyntaxIsVar = false;
        public static string AttributeListSyntaxOpenBracketTokenStr = "[";
        public static string AttributeListSyntaxTargetStr = null;
        public static string AttributeListSyntaxAttributesStr = "";
        public static string AttributeListSyntaxCloseBracketTokenStr = "]";
        public static string AttributeTargetSpecifierSyntaxIdentifierStr = "assembly";
        public static string AttributeTargetSpecifierSyntaxColonTokenStr = ":";
        public static string AttributeSyntaxNameStr = "Fact";
        public static string AttributeSyntaxArgumentListStr = "";
        public static string AliasQualifiedNameSyntaxAliasStr = "global";
        public static string AliasQualifiedNameSyntaxColonColonTokenStr = "::";
        public static string AliasQualifiedNameSyntaxNameStr = "System";
        public static int AliasQualifiedNameSyntaxArity = 0;
        public static bool AliasQualifiedNameSyntaxIsVar = false;
        public static string AttributeArgumentListSyntaxOpenParenTokenStr = "(";
        public static string AttributeArgumentListSyntaxArgumentsStr = "";
        public static string AttributeArgumentListSyntaxCloseParenTokenStr = ")";
        public static string AttributeArgumentSyntaxNameEqualsStr = null;
        public static string AttributeArgumentSyntaxNameColonStr = null;
        public static string AttributeArgumentSyntaxExpressionStr = "";
        public static string LiteralExpressionSyntaxTokenStr = "";
        public static string NameEqualsSyntaxNameStr = "";
        public static string NameEqualsSyntaxEqualsTokenStr = "=";
        public static string NamespaceDeclarationSyntaxNamespaceKeywordStr = "namespace";
        public static string NamespaceDeclarationSyntaxNameStr = "";
        public static string NamespaceDeclarationSyntaxOpenBraceTokenStr = "{";
        public static string NamespaceDeclarationSyntaxExternsStr = "";
        public static string NamespaceDeclarationSyntaxUsingsStr = "";
        public static string NamespaceDeclarationSyntaxMembersStr = "";
        public static string NamespaceDeclarationSyntaxCloseBraceTokenStr = "}";
        public static string NamespaceDeclarationSyntaxSemicolonTokenStr = null;
        public static int ClassDeclarationSyntaxArity = 0;
        public static string ClassDeclarationSyntaxKeywordStr = "class";
        public static string ClassDeclarationSyntaxTypeParameterListStr = null;
        public static string ClassDeclarationSyntaxConstraintClausesStr = "";
        public static string ClassDeclarationSyntaxMembersStr = "";
        public static string ClassDeclarationSyntaxAttributeListsStr = "";
        public static string ClassDeclarationSyntaxModifiersStr = "";
        public static string ClassDeclarationSyntaxIdentifierStr = "";
        public static string ClassDeclarationSyntaxBaseListStr = null;
        public static string ClassDeclarationSyntaxOpenBraceTokenStr = "{";
        public static string ClassDeclarationSyntaxCloseBraceTokenStr = "}";
        public static string ClassDeclarationSyntaxSemicolonTokenStr = null;
        public static int MethodDeclarationSyntaxArity = 0;
        public static string MethodDeclarationSyntaxReturnTypeStr = "void ";
        public static string MethodDeclarationSyntaxExplicitInterfaceSpecifierStr = null;
        public static string MethodDeclarationSyntaxIdentifierStr = "";
        public static string MethodDeclarationSyntaxTypeParameterListStr = null;
        public static string MethodDeclarationSyntaxConstraintClausesStr = "";
        public static string MethodDeclarationSyntaxAttributeListsStr = "";
        public static string MethodDeclarationSyntaxModifiersStr = "";

        public static string MethodDeclarationSyntaxParameterListStr = @"()
            ";

        public static string MethodDeclarationSyntaxBodyStr = "";
        public static string MethodDeclarationSyntaxExpressionBodyStr = null;
        public static string MethodDeclarationSyntaxSemicolonTokenStr = null;
        public static string PredefinedTypeSyntaxKeywordStr = "";
        public static bool PredefinedTypeSyntaxIsVar = false;
        public static string ParameterListSyntaxOpenParenTokenStr = "(";
        public static string ParameterListSyntaxCloseParenTokenStr = ")";
        public static string ParameterListSyntaxParametersStr = "";
        public static string ParameterSyntaxAttributeListsStr = "";
        public static string ParameterSyntaxModifiersStr = "";
        public static string ParameterSyntaxTypeStr = "";
        public static string ParameterSyntaxIdentifierStr = "";
        public static string ParameterSyntaxDefaultStr = null;
        public static string ArrayTypeSyntaxElementTypeStr = "";
        public static string ArrayTypeSyntaxRankSpecifiersStr = "[] ";
        public static bool ArrayTypeSyntaxIsVar = false;
        public static int ArrayRankSpecifierSyntaxRank = 1;
        public static string ArrayRankSpecifierSyntaxOpenBracketTokenStr = "[";
        public static string ArrayRankSpecifierSyntaxSizesStr = "";
        public static string ArrayRankSpecifierSyntaxCloseBracketTokenStr = "]";
        public static string OmittedArraySizeExpressionSyntaxOmittedArraySizeExpressionTokenStr = "";
        public static string BlockSyntaxOpenBraceTokenStr = "{";
        public static string BlockSyntaxStatementsStr = "";
        public static string BlockSyntaxCloseBraceTokenStr = "}";
        public static string IfStatementSyntaxIfKeywordStr = "if";
        public static string IfStatementSyntaxOpenParenTokenStr = "(";
        public static string IfStatementSyntaxConditionStr = "";
        public static string IfStatementSyntaxCloseParenTokenStr = ")";
        public static string IfStatementSyntaxStatementStr = "";
        public static string IfStatementSyntaxElseStr = null;
        public static string BinaryExpressionSyntaxLeftStr = "i ";
        public static string BinaryExpressionSyntaxOperatorTokenStr = "";
        public static string BinaryExpressionSyntaxRightStr = "null";
        public static string MemberAccessExpressionSyntaxExpressionStr = "";
        public static string MemberAccessExpressionSyntaxOperatorTokenStr = ".";
        public static string MemberAccessExpressionSyntaxNameStr = "";
        public static bool ExpressionStatementSyntaxAllowsAnyExpression = false;
        public static string ExpressionStatementSyntaxExpressionStr = "";
        public static string ExpressionStatementSyntaxSemicolonTokenStr = ";";
        public static string InvocationExpressionSyntaxExpressionStr = "";
        public static string InvocationExpressionSyntaxArgumentListStr = "()";
        public static string ArgumentListSyntaxOpenParenTokenStr = "(";
        public static string ArgumentListSyntaxCloseParenTokenStr = ")";
        public static string ArgumentListSyntaxArgumentsStr = "";
        public static string ArgumentSyntaxNameColonStr = null;
        public static string ArgumentSyntaxRefOrOutKeywordStr = "";
        public static string ArgumentSyntaxExpressionStr = "";
        public static string ReturnStatementSyntaxReturnKeywordStr = "return";
        public static string ReturnStatementSyntaxExpressionStr = "";
        public static string ReturnStatementSyntaxSemicolonTokenStr = ";";
        public static string PrefixUnaryExpressionSyntaxOperatorTokenStr = "!";
        public static string PrefixUnaryExpressionSyntaxOperandStr = "1";
        public static bool LocalDeclarationStatementSyntaxIsConst = false;
        public static string LocalDeclarationStatementSyntaxModifiersStr = "";
        public static string LocalDeclarationStatementSyntaxDeclarationStr = "";
        public static string LocalDeclarationStatementSyntaxSemicolonTokenStr = ";";
        public static string VariableDeclarationSyntaxTypeStr = "            var ";
        public static string VariableDeclarationSyntaxVariablesStr = "";
        public static string VariableDeclaratorSyntaxIdentifierStr = "";
        public static string VariableDeclaratorSyntaxArgumentListStr = null;
        public static string VariableDeclaratorSyntaxInitializerStr = null;
        public static string EqualsValueClauseSyntaxEqualsTokenStr = "=";
        public static string EqualsValueClauseSyntaxValueStr = "";
        public static string ElementAccessExpressionSyntaxExpressionStr = "";
        public static string ElementAccessExpressionSyntaxArgumentListStr = "[0]";
        public static string BracketedArgumentListSyntaxOpenBracketTokenStr = "[";
        public static string BracketedArgumentListSyntaxCloseBracketTokenStr = "]";
        public static string BracketedArgumentListSyntaxArgumentsStr = "0";
        public static string SimpleLambdaExpressionSyntaxParameterStr = "";
        public static string SimpleLambdaExpressionSyntaxArrowTokenStr = "=>";
        public static string SimpleLambdaExpressionSyntaxAsyncKeywordStr = "";
        public static string SimpleLambdaExpressionSyntaxBodyStr = "";
        public static string ObjectCreationExpressionSyntaxNewKeywordStr = "new";
        public static string ObjectCreationExpressionSyntaxTypeStr = "";
        public static string ObjectCreationExpressionSyntaxArgumentListStr = "()";
        public static string ObjectCreationExpressionSyntaxInitializerStr = null;
        public static string InterpolatedStringExpressionSyntaxStringStartTokenStr = "$\"";
        public static string InterpolatedStringExpressionSyntaxContentsStr = "";
        public static string InterpolatedStringExpressionSyntaxStringEndTokenStr = "\"";
        public static string InterpolatedStringTextSyntaxTextTokenStr = "";
        public static string InterpolationSyntaxOpenBraceTokenStr = "{";
        public static string InterpolationSyntaxExpressionStr = "";
        public static string InterpolationSyntaxAlignmentClauseStr = null;
        public static string InterpolationSyntaxFormatClauseStr = null;
        public static string InterpolationSyntaxCloseBraceTokenStr = "}";
        public static string ForEachStatementSyntaxTypeStr = "var ";
        public static string ForEachStatementSyntaxIdentifierStr = "";
        public static string ForEachStatementSyntaxForEachKeywordStr = "foreach";
        public static string ForEachStatementSyntaxOpenParenTokenStr = "(";
        public static string ForEachStatementSyntaxInKeywordStr = "in";
        public static string ForEachStatementSyntaxExpressionStr = "";
        public static string ForEachStatementSyntaxCloseParenTokenStr = ")";
        public static string ForEachStatementSyntaxStatementStr = "";
        public static string InitializerExpressionSyntaxOpenBraceTokenStr = "{";
        public static string InitializerExpressionSyntaxExpressionsStr = "";
        public static string InitializerExpressionSyntaxCloseBraceTokenStr = "}";
        public static string AssignmentExpressionSyntaxLeftStr = "";
        public static string AssignmentExpressionSyntaxOperatorTokenStr = "=";
        public static string AssignmentExpressionSyntaxRightStr = "";
        public static string UsingStatementSyntaxUsingKeywordStr = "using";
        public static string UsingStatementSyntaxOpenParenTokenStr = "(";
        public static string UsingStatementSyntaxDeclarationStr = null;
        public static string UsingStatementSyntaxExpressionStr = null;
        public static string UsingStatementSyntaxCloseParenTokenStr = ")";
        public static string UsingStatementSyntaxStatementStr = "";
        public static string TryStatementSyntaxTryKeywordStr = "try";
        public static string TryStatementSyntaxBlockStr = "";
        public static string TryStatementSyntaxCatchesStr = "";
        public static string TryStatementSyntaxFinallyStr = null;
        public static string CatchClauseSyntaxCatchKeywordStr = "catch";
        public static string CatchClauseSyntaxDeclarationStr = "";
        public static string CatchClauseSyntaxFilterStr = null;
        public static string CatchClauseSyntaxBlockStr = "";
        public static string ThrowStatementSyntaxThrowKeywordStr = "throw";
        public static string ThrowStatementSyntaxExpressionStr = "";
        public static string ThrowStatementSyntaxSemicolonTokenStr = ";";
        public static string FieldDeclarationSyntaxAttributeListsStr = "";
        public static string FieldDeclarationSyntaxModifiersStr = "";
        public static string FieldDeclarationSyntaxDeclarationStr = "";
        public static string FieldDeclarationSyntaxSemicolonTokenStr = ";";
        public static string ConstructorDeclarationSyntaxIdentifierStr = "";
        public static string ConstructorDeclarationSyntaxInitializerStr = null;
        public static string ConstructorDeclarationSyntaxAttributeListsStr = "";
        public static string ConstructorDeclarationSyntaxModifiersStr = "";

        public static string ConstructorDeclarationSyntaxParameterListStr = @"()
            ";

        public static string ConstructorDeclarationSyntaxBodyStr = @"            {
    }
    ";

        public static string ConstructorDeclarationSyntaxExpressionBodyStr = null;
        public static string ConstructorDeclarationSyntaxSemicolonTokenStr = null;
        public static string PropertyDeclarationSyntaxSemicolonStr = "";
        public static string PropertyDeclarationSyntaxIdentifierStr = "";
        public static string PropertyDeclarationSyntaxExpressionBodyStr = null;
        public static string PropertyDeclarationSyntaxInitializerStr = null;
        public static string PropertyDeclarationSyntaxSemicolonTokenStr = null;
        public static string PropertyDeclarationSyntaxAttributeListsStr = "";
        public static string PropertyDeclarationSyntaxModifiersStr = "";
        public static string PropertyDeclarationSyntaxTypeStr = "";
        public static string PropertyDeclarationSyntaxExplicitInterfaceSpecifierStr = null;

        public static string PropertyDeclarationSyntaxAccessorListStr = @"{ get; }
    ";

        public static string AccessorListSyntaxOpenBraceTokenStr = "{";
        public static string AccessorListSyntaxAccessorsStr = "get; ";
        public static string AccessorListSyntaxCloseBraceTokenStr = "}";
        public static string AccessorDeclarationSyntaxAttributeListsStr = "";
        public static string AccessorDeclarationSyntaxModifiersStr = "";
        public static string AccessorDeclarationSyntaxKeywordStr = "get";
        public static string AccessorDeclarationSyntaxBodyStr = null;
        public static string AccessorDeclarationSyntaxExpressionBodyStr = null;
        public static string AccessorDeclarationSyntaxSemicolonTokenStr = null;
        public static string TypeOfExpressionSyntaxKeywordStr = "typeof";
        public static string TypeOfExpressionSyntaxOpenParenTokenStr = "(";
        public static string TypeOfExpressionSyntaxTypeStr = "";
        public static string TypeOfExpressionSyntaxCloseParenTokenStr = ")";
        public static bool GenericNameSyntaxIsUnboundGenericName = false;
        public static string GenericNameSyntaxTypeArgumentListStr = "";
        public static string GenericNameSyntaxIdentifierStr = "";
        public static int GenericNameSyntaxArity = 1;
        public static bool GenericNameSyntaxIsVar = false;
        public static string TypeArgumentListSyntaxLessThanTokenStr = "<";
        public static string TypeArgumentListSyntaxArgumentsStr = "";
        public static string TypeArgumentListSyntaxGreaterThanTokenStr = ">";
        public static string ConditionalAccessExpressionSyntaxExpressionStr = "";
        public static string ConditionalAccessExpressionSyntaxOperatorTokenStr = "?";
        public static string ConditionalAccessExpressionSyntaxWhenNotNullStr = "";
        public static string MemberBindingExpressionSyntaxOperatorTokenStr = ".";
        public static string MemberBindingExpressionSyntaxNameStr = "";
        public static string CastExpressionSyntaxOpenParenTokenStr = "(";
        public static string CastExpressionSyntaxTypeStr = "";
        public static string CastExpressionSyntaxCloseParenTokenStr = ")";
        public static string CastExpressionSyntaxExpressionStr = "";
        public static int StructDeclarationSyntaxArity = 0;
        public static string StructDeclarationSyntaxKeywordStr = "struct";
        public static string StructDeclarationSyntaxTypeParameterListStr = null;
        public static string StructDeclarationSyntaxConstraintClausesStr = "";
        public static string StructDeclarationSyntaxMembersStr = "";
        public static string StructDeclarationSyntaxAttributeListsStr = "";
        public static string StructDeclarationSyntaxModifiersStr = "";
        public static string StructDeclarationSyntaxIdentifierStr = "";
        public static string StructDeclarationSyntaxBaseListStr = null;
        public static string StructDeclarationSyntaxOpenBraceTokenStr = "{";
        public static string StructDeclarationSyntaxCloseBraceTokenStr = "}";
        public static string StructDeclarationSyntaxSemicolonTokenStr = null;
        public static string ArrowExpressionClauseSyntaxArrowTokenStr = "=>";
        public static string ArrowExpressionClauseSyntaxExpressionStr = "false";
        public static string BaseListSyntaxColonTokenStr = ":";
        public static string BaseListSyntaxTypesStr = "";
        public static string SimpleBaseTypeSyntaxTypeStr = "";
        public static string ParenthesizedLambdaExpressionSyntaxParameterListStr = "() ";
        public static string ParenthesizedLambdaExpressionSyntaxArrowTokenStr = "=>";
        public static string ParenthesizedLambdaExpressionSyntaxAsyncKeywordStr = "";
        public static string ParenthesizedLambdaExpressionSyntaxBodyStr = "";
        public static string NameColonSyntaxNameStr = "options";
        public static string NameColonSyntaxColonTokenStr = ":";
        public static string FinallyClauseSyntaxFinallyKeywordStr = "finally";
        public static string FinallyClauseSyntaxBlockStr = "";
        public static string ArrayCreationExpressionSyntaxNewKeywordStr = "new";
        public static string ArrayCreationExpressionSyntaxTypeStr = "";
        public static string ArrayCreationExpressionSyntaxInitializerStr = null;
        public static string TypeParameterListSyntaxLessThanTokenStr = "<";
        public static string TypeParameterListSyntaxParametersStr = "";
        public static string TypeParameterListSyntaxGreaterThanTokenStr = ">";
        public static string TypeParameterSyntaxAttributeListsStr = "";
        public static string TypeParameterSyntaxVarianceKeywordStr = "";
        public static string TypeParameterSyntaxIdentifierStr = "";
        public static string ImplicitArrayCreationExpressionSyntaxNewKeywordStr = "new";
        public static string ImplicitArrayCreationExpressionSyntaxOpenBracketTokenStr = "[";
        public static string ImplicitArrayCreationExpressionSyntaxCommasStr = "";
        public static string ImplicitArrayCreationExpressionSyntaxCloseBracketTokenStr = "]";
        public static string ImplicitArrayCreationExpressionSyntaxInitializerStr = "";
        public static string AwaitExpressionSyntaxAwaitKeywordStr = "await";
        public static string AwaitExpressionSyntaxExpressionStr = "";
        public static string ForStatementSyntaxForKeywordStr = "for";
        public static string ForStatementSyntaxOpenParenTokenStr = "(";
        public static string ForStatementSyntaxDeclarationStr = "int i = 0";
        public static string ForStatementSyntaxInitializersStr = "";
        public static string ForStatementSyntaxFirstSemicolonTokenStr = ";";
        public static string ForStatementSyntaxConditionStr = "";
        public static string ForStatementSyntaxSecondSemicolonTokenStr = ";";
        public static string ForStatementSyntaxIncrementorsStr = "i++";
        public static string ForStatementSyntaxCloseParenTokenStr = ")";
        public static string ForStatementSyntaxStatementStr = "";
        public static string PostfixUnaryExpressionSyntaxOperandStr = "i";
        public static string PostfixUnaryExpressionSyntaxOperatorTokenStr = "++";
        public static string CatchDeclarationSyntaxOpenParenTokenStr = "(";
        public static string CatchDeclarationSyntaxTypeStr = "";
        public static string CatchDeclarationSyntaxIdentifierStr = "";
        public static string CatchDeclarationSyntaxCloseParenTokenStr = ")";
        public static string DefaultExpressionSyntaxKeywordStr = "default";
        public static string DefaultExpressionSyntaxOpenParenTokenStr = "(";
        public static string DefaultExpressionSyntaxTypeStr = "CancellationToken";
        public static string DefaultExpressionSyntaxCloseParenTokenStr = ")";
        public static string ParenthesizedExpressionSyntaxOpenParenTokenStr = "(";
        public static string ParenthesizedExpressionSyntaxExpressionStr = "";
        public static string ParenthesizedExpressionSyntaxCloseParenTokenStr = ")";
        public static string ConditionalExpressionSyntaxConditionStr = "";
        public static string ConditionalExpressionSyntaxQuestionTokenStr = "?";
        public static string ConditionalExpressionSyntaxWhenTrueStr = "null ";
        public static string ConditionalExpressionSyntaxColonTokenStr = ":";
        public static string ConditionalExpressionSyntaxWhenFalseStr = "null";
        public static string ElseClauseSyntaxElseKeywordStr = "else";
        public static string ElseClauseSyntaxStatementStr = "";
        public static string QueryExpressionSyntaxFromClauseStr = "";
        public static string QueryExpressionSyntaxBodyStr = "";
        public static string FromClauseSyntaxFromKeywordStr = "from";
        public static string FromClauseSyntaxTypeStr = null;
        public static string FromClauseSyntaxIdentifierStr = "a";
        public static string FromClauseSyntaxInKeywordStr = "in";
        public static string FromClauseSyntaxExpressionStr = "";
        public static string QueryBodySyntaxClausesStr = "";
        public static string QueryBodySyntaxSelectOrGroupStr = "select a";
        public static string QueryBodySyntaxContinuationStr = null;
        public static string SelectClauseSyntaxSelectKeywordStr = "select";
        public static string SelectClauseSyntaxExpressionStr = "a";
        public static string WhereClauseSyntaxWhereKeywordStr = "where";
        public static string WhereClauseSyntaxConditionStr = "";
        public static string SizeOfExpressionSyntaxKeywordStr = "sizeof";
        public static string SizeOfExpressionSyntaxOpenParenTokenStr = "(";
        public static string SizeOfExpressionSyntaxTypeStr = "";
        public static string SizeOfExpressionSyntaxCloseParenTokenStr = ")";
        public static string SwitchStatementSyntaxSwitchKeywordStr = "switch";
        public static string SwitchStatementSyntaxOpenParenTokenStr = "(";
        public static string SwitchStatementSyntaxExpressionStr = "index";
        public static string SwitchStatementSyntaxCloseParenTokenStr = ")";
        public static string SwitchStatementSyntaxOpenBraceTokenStr = "{";
        public static string SwitchStatementSyntaxSectionsStr = "";
        public static string SwitchStatementSyntaxCloseBraceTokenStr = "}";
        public static string SwitchSectionSyntaxLabelsStr = "";
        public static string SwitchSectionSyntaxStatementsStr = "";
        public static string CaseSwitchLabelSyntaxValueStr = "";
        public static string CaseSwitchLabelSyntaxKeywordStr = "case";
        public static string CaseSwitchLabelSyntaxColonTokenStr = ":";
        public static string BreakStatementSyntaxBreakKeywordStr = "break";
        public static string BreakStatementSyntaxSemicolonTokenStr = ";";
        public static string DefaultSwitchLabelSyntaxKeywordStr = "default";
        public static string DefaultSwitchLabelSyntaxColonTokenStr = ":";
        public static string ExplicitInterfaceSpecifierSyntaxNameStr = "";
        public static string ExplicitInterfaceSpecifierSyntaxDotTokenStr = ".";
        public static string CheckedStatementSyntaxKeywordStr = "unchecked";
        public static string CheckedStatementSyntaxBlockStr = "";
        public static string EnumDeclarationSyntaxEnumKeywordStr = "enum";
        public static string EnumDeclarationSyntaxMembersStr = "";
        public static string EnumDeclarationSyntaxAttributeListsStr = "";
        public static string EnumDeclarationSyntaxModifiersStr = "";
        public static string EnumDeclarationSyntaxIdentifierStr = "";
        public static string EnumDeclarationSyntaxBaseListStr = null;
        public static string EnumDeclarationSyntaxOpenBraceTokenStr = "{";
        public static string EnumDeclarationSyntaxCloseBraceTokenStr = "}";
        public static string EnumDeclarationSyntaxSemicolonTokenStr = "";
        public static string EnumMemberDeclarationSyntaxAttributeListsStr = "";
        public static string EnumMemberDeclarationSyntaxIdentifierStr = "";
        public static string EnumMemberDeclarationSyntaxEqualsValueStr = null;
        public static string ThisExpressionSyntaxTokenStr = "this";
        public static string ContinueStatementSyntaxContinueKeywordStr = "continue";
        public static string ContinueStatementSyntaxSemicolonTokenStr = ";";
        public static string FixedStatementSyntaxFixedKeywordStr = "fixed";
        public static string FixedStatementSyntaxOpenParenTokenStr = "(";
        public static string FixedStatementSyntaxDeclarationStr = "";
        public static string FixedStatementSyntaxCloseParenTokenStr = ")";
        public static string FixedStatementSyntaxStatementStr = "";
        public static string PointerTypeSyntaxElementTypeStr = "";
        public static string PointerTypeSyntaxAsteriskTokenStr = "*";
        public static bool PointerTypeSyntaxIsVar = false;
        public static string ConstructorInitializerSyntaxColonTokenStr = ":";
        public static string ConstructorInitializerSyntaxThisOrBaseKeywordStr = "base";
        public static string ConstructorInitializerSyntaxArgumentListStr = "";
        public static string YieldStatementSyntaxYieldKeywordStr = "yield";
        public static string YieldStatementSyntaxReturnOrBreakKeywordStr = "return";
        public static string YieldStatementSyntaxExpressionStr = "";
        public static string YieldStatementSyntaxSemicolonTokenStr = ";";
        public static string UnsafeStatementSyntaxUnsafeKeywordStr = "unsafe";

        public static string UnsafeStatementSyntaxBlockStr = "";

        //public static string UnsafeStatementSyntaxBlockStr = "";
        public static string NullableTypeSyntaxElementTypeStr = "";

        public static string NullableTypeSyntaxQuestionTokenStr = "?";
        public static bool NullableTypeSyntaxIsVar = false;
        public static string InterpolationFormatClauseSyntaxColonTokenStr = ":";
        public static string InterpolationFormatClauseSyntaxFormatStringTokenStr = "";
        public static string DeclarationExpressionSyntaxTypeStr = "var ";
        public static string DeclarationExpressionSyntaxDesignationStr = "";
        public static string SingleVariableDesignationSyntaxIdentifierStr = "";
        public static string LetClauseSyntaxLetKeywordStr = "let";
        public static string LetClauseSyntaxIdentifierStr = "";
        public static string LetClauseSyntaxEqualsTokenStr = "=";
        public static string LetClauseSyntaxExpressionStr = "";
        public static string ExternAliasDirectiveSyntaxExternKeywordStr = "extern";
        public static string ExternAliasDirectiveSyntaxAliasKeywordStr = "alias";
        public static string ExternAliasDirectiveSyntaxIdentifierStr = "";
        public static string ExternAliasDirectiveSyntaxSemicolonTokenStr = ";";
        public static string TupleExpressionSyntaxOpenParenTokenStr = "(";
        public static string TupleExpressionSyntaxArgumentsStr = "";
        public static string TupleExpressionSyntaxCloseParenTokenStr = ")";
        public static string LockStatementSyntaxLockKeywordStr = "lock";
        public static string LockStatementSyntaxOpenParenTokenStr = "(";
        public static string LockStatementSyntaxExpressionStr = "_gate";
        public static string LockStatementSyntaxCloseParenTokenStr = ")";
        public static string LockStatementSyntaxStatementStr = "";
        public static string DestructorDeclarationSyntaxTildeTokenStr = "~";
        public static string DestructorDeclarationSyntaxIdentifierStr = "";
        public static string DestructorDeclarationSyntaxAttributeListsStr = "";
        public static string DestructorDeclarationSyntaxModifiersStr = "";

        public static string DestructorDeclarationSyntaxParameterListStr = @"()
    ";

        public static string DestructorDeclarationSyntaxBodyStr = "";
        public static string DestructorDeclarationSyntaxExpressionBodyStr = null;
        public static string DestructorDeclarationSyntaxSemicolonTokenStr = null;
        public static string BaseExpressionSyntaxTokenStr = "base";
        public static string CheckedExpressionSyntaxKeywordStr = "unchecked";
        public static string CheckedExpressionSyntaxOpenParenTokenStr = "(";
        public static string CheckedExpressionSyntaxExpressionStr = "";
        public static string CheckedExpressionSyntaxCloseParenTokenStr = ")";
        public static string TypeParameterConstraintClauseSyntaxWhereKeywordStr = "where";
        public static string TypeParameterConstraintClauseSyntaxNameStr = "";
        public static string TypeParameterConstraintClauseSyntaxColonTokenStr = ":";
        public static string TypeParameterConstraintClauseSyntaxConstraintsStr = "";
        public static string ClassOrStructConstraintSyntaxClassOrStructKeywordStr = "class";
        public static string WhileStatementSyntaxWhileKeywordStr = "while";
        public static string WhileStatementSyntaxOpenParenTokenStr = "(";
        public static string WhileStatementSyntaxConditionStr = "true";
        public static string WhileStatementSyntaxCloseParenTokenStr = ")";
        public static string WhileStatementSyntaxStatementStr = "";
        public static string DoStatementSyntaxDoKeywordStr = "do";
        public static string DoStatementSyntaxStatementStr = "";
        public static string DoStatementSyntaxWhileKeywordStr = "while";
        public static string DoStatementSyntaxOpenParenTokenStr = "(";
        public static string DoStatementSyntaxConditionStr = "";
        public static string DoStatementSyntaxCloseParenTokenStr = ")";
        public static string DoStatementSyntaxSemicolonTokenStr = ";";
        public static int InterfaceDeclarationSyntaxArity = 0;
        public static string InterfaceDeclarationSyntaxKeywordStr = "interface";
        public static string InterfaceDeclarationSyntaxTypeParameterListStr = "";
        public static string InterfaceDeclarationSyntaxConstraintClausesStr = "";
        public static string InterfaceDeclarationSyntaxMembersStr = "";
        public static string InterfaceDeclarationSyntaxAttributeListsStr = "";
        public static string InterfaceDeclarationSyntaxModifiersStr = "";
        public static string InterfaceDeclarationSyntaxIdentifierStr = "";
        public static string InterfaceDeclarationSyntaxBaseListStr = null;
        public static string InterfaceDeclarationSyntaxOpenBraceTokenStr = "{";
        public static string InterfaceDeclarationSyntaxCloseBraceTokenStr = "}";
        public static string InterfaceDeclarationSyntaxSemicolonTokenStr = null;
        public static string IndexerDeclarationSyntaxSemicolonStr = "";
        public static string IndexerDeclarationSyntaxThisKeywordStr = "this";
        public static string IndexerDeclarationSyntaxParameterListStr = "";
        public static string IndexerDeclarationSyntaxExpressionBodyStr = null;
        public static string IndexerDeclarationSyntaxSemicolonTokenStr = null;
        public static string IndexerDeclarationSyntaxAttributeListsStr = "";
        public static string IndexerDeclarationSyntaxModifiersStr = "";
        public static string IndexerDeclarationSyntaxTypeStr = "";
        public static string IndexerDeclarationSyntaxExplicitInterfaceSpecifierStr = null;
        public static string IndexerDeclarationSyntaxAccessorListStr = "";
        public static string BracketedParameterListSyntaxOpenBracketTokenStr = "[";
        public static string BracketedParameterListSyntaxCloseBracketTokenStr = "]";
        public static string BracketedParameterListSyntaxParametersStr = "";
        public static string CatchFilterClauseSyntaxWhenKeywordStr = "when";
        public static string CatchFilterClauseSyntaxOpenParenTokenStr = "(";
        public static string CatchFilterClauseSyntaxFilterExpressionStr = "";
        public static string CatchFilterClauseSyntaxCloseParenTokenStr = ")";
        public static string OperatorDeclarationSyntaxReturnTypeStr = "bool ";
        public static string OperatorDeclarationSyntaxOperatorKeywordStr = "operator";
        public static string OperatorDeclarationSyntaxOperatorTokenStr = "";
        public static string OperatorDeclarationSyntaxAttributeListsStr = "";
        public static string OperatorDeclarationSyntaxModifiersStr = "public static ";
        public static string OperatorDeclarationSyntaxParameterListStr = "";
        public static string OperatorDeclarationSyntaxBodyStr = "";
        public static string OperatorDeclarationSyntaxExpressionBodyStr = null;
        public static string OperatorDeclarationSyntaxSemicolonTokenStr = null;
        public static string EmptyStatementSyntaxSemicolonTokenStr = ";";
        public static string GotoStatementSyntaxGotoKeywordStr = "goto";
        public static string GotoStatementSyntaxCaseOrDefaultKeywordStr = "";
        public static string GotoStatementSyntaxExpressionStr = null;
        public static string GotoStatementSyntaxSemicolonTokenStr = ";";
        public static string ConversionOperatorDeclarationSyntaxImplicitOrExplicitKeywordStr = "implicit";
        public static string ConversionOperatorDeclarationSyntaxOperatorKeywordStr = "operator";
        public static string ConversionOperatorDeclarationSyntaxTypeStr = "";
        public static string ConversionOperatorDeclarationSyntaxAttributeListsStr = "";
        public static string ConversionOperatorDeclarationSyntaxModifiersStr = "public static ";
        public static string ConversionOperatorDeclarationSyntaxParameterListStr = "";
        public static string ConversionOperatorDeclarationSyntaxBodyStr = "";
        public static string ConversionOperatorDeclarationSyntaxExpressionBodyStr = null;
        public static string ConversionOperatorDeclarationSyntaxSemicolonTokenStr = null;
        public static string OmittedTypeArgumentSyntaxOmittedTypeArgumentTokenStr = "";
        public static bool OmittedTypeArgumentSyntaxIsVar = false;
        public static string TypeConstraintSyntaxTypeStr = "";
        public static string TupleTypeSyntaxOpenParenTokenStr = "(";
        public static string TupleTypeSyntaxElementsStr = "";
        public static string TupleTypeSyntaxCloseParenTokenStr = ")";
        public static bool TupleTypeSyntaxIsVar = false;
        public static string TupleElementSyntaxTypeStr = "";
        public static string TupleElementSyntaxIdentifierStr = "";
        public static int DelegateDeclarationSyntaxArity = 0;
        public static string DelegateDeclarationSyntaxAttributeListsStr = "";
        public static string DelegateDeclarationSyntaxModifiersStr = "";
        public static string DelegateDeclarationSyntaxDelegateKeywordStr = "delegate";
        public static string DelegateDeclarationSyntaxReturnTypeStr = "";
        public static string DelegateDeclarationSyntaxIdentifierStr = "";
        public static string DelegateDeclarationSyntaxTypeParameterListStr = null;
        public static string DelegateDeclarationSyntaxParameterListStr = "";
        public static string DelegateDeclarationSyntaxConstraintClausesStr = "";
        public static string DelegateDeclarationSyntaxSemicolonTokenStr = ";";
        public static string LabeledStatementSyntaxIdentifierStr = "";
        public static string LabeledStatementSyntaxColonTokenStr = ":";
        public static string LabeledStatementSyntaxStatementStr = "";

        public static string ElementBindingExpressionSyntaxArgumentListStr = "";

        //public static string ElementBindingExpressionSyntaxArgumentListStr = "";
        public static string LocalFunctionStatementSyntaxModifiersStr = "";

        public static string LocalFunctionStatementSyntaxReturnTypeStr = "";
        public static string LocalFunctionStatementSyntaxIdentifierStr = "";
        public static string LocalFunctionStatementSyntaxTypeParameterListStr = null;
        public static string LocalFunctionStatementSyntaxParameterListStr = "";
        public static string LocalFunctionStatementSyntaxConstraintClausesStr = "";
        public static string LocalFunctionStatementSyntaxBodyStr = "";
        public static string LocalFunctionStatementSyntaxExpressionBodyStr = null;
        public static string LocalFunctionStatementSyntaxSemicolonTokenStr = null;
        public static string IsPatternExpressionSyntaxExpressionStr = "";
        public static string IsPatternExpressionSyntaxIsKeywordStr = "is";
        public static string IsPatternExpressionSyntaxPatternStr = "";
        public static string DeclarationPatternSyntaxTypeStr = "";
        public static string DeclarationPatternSyntaxDesignationStr = "";
        public static string ThrowExpressionSyntaxThrowKeywordStr = "throw";
        public static string ThrowExpressionSyntaxExpressionStr = "";
        public static string EventFieldDeclarationSyntaxEventKeywordStr = "event";
        public static string EventFieldDeclarationSyntaxAttributeListsStr = "";
        public static string EventFieldDeclarationSyntaxModifiersStr = "";
        public static string EventFieldDeclarationSyntaxDeclarationStr = "";
        public static string EventFieldDeclarationSyntaxSemicolonTokenStr = ";";
        public static string ConstructorConstraintSyntaxNewKeywordStr = "new";
        public static string ConstructorConstraintSyntaxOpenParenTokenStr = "(";
        public static string ConstructorConstraintSyntaxCloseParenTokenStr = ")";
        public static string GroupClauseSyntaxGroupKeywordStr = "group";

        public static string GroupClauseSyntaxGroupExpressionStr = "";

        //public static string GroupClauseSyntaxGroupExpressionStr = "";
        public static string GroupClauseSyntaxByKeywordStr = "by";

        public static string GroupClauseSyntaxByExpressionStr = "";

        //public static string GroupClauseSyntaxByExpressionStr = "";
        public static string EventDeclarationSyntaxEventKeywordStr = "event";

        public static string EventDeclarationSyntaxIdentifierStr = "";
        public static string EventDeclarationSyntaxAttributeListsStr = "";
        public static string EventDeclarationSyntaxModifiersStr = "";
        public static string EventDeclarationSyntaxTypeStr = "";
        public static string EventDeclarationSyntaxExplicitInterfaceSpecifierStr = null;
        public static string EventDeclarationSyntaxAccessorListStr = "";
        public static string ParenthesizedVariableDesignationSyntaxOpenParenTokenStr = "(";
        public static string ParenthesizedVariableDesignationSyntaxVariablesStr = "";
        public static string ParenthesizedVariableDesignationSyntaxCloseParenTokenStr = ")";
        public static string DiscardDesignationSyntaxUnderscoreTokenStr = "_";
        public static string AnonymousObjectCreationExpressionSyntaxNewKeywordStr = "new";
        public static string AnonymousObjectCreationExpressionSyntaxOpenBraceTokenStr = "{";
        public static string AnonymousObjectCreationExpressionSyntaxInitializersStr = "";
        public static string AnonymousObjectCreationExpressionSyntaxCloseBraceTokenStr = "}";
        public static string AnonymousObjectMemberDeclaratorSyntaxNameEqualsStr = "";
        public static string AnonymousObjectMemberDeclaratorSyntaxExpressionStr = "";
        public static string OrderByClauseSyntaxOrderByKeywordStr = "orderby";
        public static string OrderByClauseSyntaxOrderingsStr = "";
        public static string OrderingSyntaxExpressionStr = "";
        public static string OrderingSyntaxAscendingOrDescendingKeywordStr = "";
        public static string QueryContinuationSyntaxIntoKeywordStr = "into";

        public static string QueryContinuationSyntaxIdentifierStr = "";

        //public static string QueryContinuationSyntaxIdentifierStr = "g";
        public static string QueryContinuationSyntaxBodyStr = "";

        //public static string QueryContinuationSyntaxBodyStr = "";
        public static string CasePatternSwitchLabelSyntaxPatternStr = "";

        public static string CasePatternSwitchLabelSyntaxWhenClauseStr = null;
        public static string CasePatternSwitchLabelSyntaxKeywordStr = "case";
        public static string CasePatternSwitchLabelSyntaxColonTokenStr = ":";

        public static string ConstantPatternSyntaxExpressionStr = "";

        //public static string ConstantPatternSyntaxExpressionStr = "";
        public static string WhenClauseSyntaxWhenKeywordStr = "when";

        public static string WhenClauseSyntaxConditionStr = "";

        //public static string WhenClauseSyntaxConditionStr = "";
        public static string AnonymousMethodExpressionSyntaxBlockStr = "";

        public static string AnonymousMethodExpressionSyntaxDelegateKeywordStr = "delegate";
        public static string AnonymousMethodExpressionSyntaxParameterListStr = null;
        public static string AnonymousMethodExpressionSyntaxAsyncKeywordStr = "";
        public static string AnonymousMethodExpressionSyntaxBodyStr = "";
        public static string IncompleteMemberSyntaxAttributeListsStr = "";
        public static string IncompleteMemberSyntaxModifiersStr = "";

        public static string IncompleteMemberSyntaxTypeStr = "";

        //public static string IncompleteMemberSyntaxTypeStr = "";
        public static string ImplicitElementAccessSyntaxArgumentListStr = "";

        public static string ForEachVariableStatementSyntaxVariableStr = "";

        //public static string ForEachVariableStatementSyntaxVariableStr = "";
        public static string ForEachVariableStatementSyntaxForEachKeywordStr = "foreach";

        public static string ForEachVariableStatementSyntaxOpenParenTokenStr = "(";
        public static string ForEachVariableStatementSyntaxInKeywordStr = "in";
        public static string ForEachVariableStatementSyntaxExpressionStr = "";
        public static string ForEachVariableStatementSyntaxCloseParenTokenStr = ")";
        public static string ForEachVariableStatementSyntaxStatementStr = "";
        public static string InterpolationAlignmentClauseSyntaxCommaTokenStr = ",";
        public static string InterpolationAlignmentClauseSyntaxValueStr = "";
    }
}